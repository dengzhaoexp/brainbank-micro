// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: fileService.proto

package fileService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FileService service

func NewFileServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FileService service

type FileService interface {
	// 获取头像
	GetAvatar(ctx context.Context, in *GetAvatarRequest, opts ...client.CallOption) (*AvatarResp, error)
	// 更新头像
	UpdateAvatar(ctx context.Context, in *UpdateAvatarRequest, opts ...client.CallOption) (*AvatarResp, error)
	// 创建神经元
	CreateNeuron(ctx context.Context, in *CreateNeuronRequest, opts ...client.CallOption) (*CreateNeuronResponse, error)
	// 删除神经元
	DeleteNeuron(ctx context.Context, in *DeleteNeuronRequest, opts ...client.CallOption) (*FileServiceResponse, error)
	// 重命名神经元
	RenameNeuron(ctx context.Context, in *RenameNeuronRequest, opts ...client.CallOption) (*RenameNeuronResponse, error)
	// 获取所有神经元
	ListNeuron(ctx context.Context, in *ListNeuronRequest, opts ...client.CallOption) (*ListNeuronResponse, error)
	// 上文文档
	UploadDocument(ctx context.Context, in *UploadDocumentRequest, opts ...client.CallOption) (*UploadDocumentResponse, error)
	// 删除文档
	DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...client.CallOption) (*FileServiceResponse, error)
	// 获取所有文档
	ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...client.CallOption) (*ListDocumentsResponse, error)
	// 重命名文档
	RenameDocument(ctx context.Context, in *RenameDocumentRequest, opts ...client.CallOption) (*RenameDocumentResponse, error)
	// 获取垃圾桶中所有文档
	ListDocumentsInBin(ctx context.Context, in *ListDocumentsInBinRequest, opts ...client.CallOption) (*ListDocumentsInBinResponse, error)
	// 恢复文档
	RecoveryDocument(ctx context.Context, in *RecoveryDocumentRequest, opts ...client.CallOption) (*RecoveryDocumentResponse, error)
}

type fileService struct {
	c    client.Client
	name string
}

func NewFileService(name string, c client.Client) FileService {
	return &fileService{
		c:    c,
		name: name,
	}
}

func (c *fileService) GetAvatar(ctx context.Context, in *GetAvatarRequest, opts ...client.CallOption) (*AvatarResp, error) {
	req := c.c.NewRequest(c.name, "FileService.GetAvatar", in)
	out := new(AvatarResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) UpdateAvatar(ctx context.Context, in *UpdateAvatarRequest, opts ...client.CallOption) (*AvatarResp, error) {
	req := c.c.NewRequest(c.name, "FileService.UpdateAvatar", in)
	out := new(AvatarResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) CreateNeuron(ctx context.Context, in *CreateNeuronRequest, opts ...client.CallOption) (*CreateNeuronResponse, error) {
	req := c.c.NewRequest(c.name, "FileService.CreateNeuron", in)
	out := new(CreateNeuronResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) DeleteNeuron(ctx context.Context, in *DeleteNeuronRequest, opts ...client.CallOption) (*FileServiceResponse, error) {
	req := c.c.NewRequest(c.name, "FileService.DeleteNeuron", in)
	out := new(FileServiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) RenameNeuron(ctx context.Context, in *RenameNeuronRequest, opts ...client.CallOption) (*RenameNeuronResponse, error) {
	req := c.c.NewRequest(c.name, "FileService.RenameNeuron", in)
	out := new(RenameNeuronResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) ListNeuron(ctx context.Context, in *ListNeuronRequest, opts ...client.CallOption) (*ListNeuronResponse, error) {
	req := c.c.NewRequest(c.name, "FileService.ListNeuron", in)
	out := new(ListNeuronResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) UploadDocument(ctx context.Context, in *UploadDocumentRequest, opts ...client.CallOption) (*UploadDocumentResponse, error) {
	req := c.c.NewRequest(c.name, "FileService.UploadDocument", in)
	out := new(UploadDocumentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...client.CallOption) (*FileServiceResponse, error) {
	req := c.c.NewRequest(c.name, "FileService.DeleteDocument", in)
	out := new(FileServiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...client.CallOption) (*ListDocumentsResponse, error) {
	req := c.c.NewRequest(c.name, "FileService.ListDocuments", in)
	out := new(ListDocumentsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) RenameDocument(ctx context.Context, in *RenameDocumentRequest, opts ...client.CallOption) (*RenameDocumentResponse, error) {
	req := c.c.NewRequest(c.name, "FileService.RenameDocument", in)
	out := new(RenameDocumentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) ListDocumentsInBin(ctx context.Context, in *ListDocumentsInBinRequest, opts ...client.CallOption) (*ListDocumentsInBinResponse, error) {
	req := c.c.NewRequest(c.name, "FileService.ListDocumentsInBin", in)
	out := new(ListDocumentsInBinResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) RecoveryDocument(ctx context.Context, in *RecoveryDocumentRequest, opts ...client.CallOption) (*RecoveryDocumentResponse, error) {
	req := c.c.NewRequest(c.name, "FileService.RecoveryDocument", in)
	out := new(RecoveryDocumentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileService service

type FileServiceHandler interface {
	// 获取头像
	GetAvatar(context.Context, *GetAvatarRequest, *AvatarResp) error
	// 更新头像
	UpdateAvatar(context.Context, *UpdateAvatarRequest, *AvatarResp) error
	// 创建神经元
	CreateNeuron(context.Context, *CreateNeuronRequest, *CreateNeuronResponse) error
	// 删除神经元
	DeleteNeuron(context.Context, *DeleteNeuronRequest, *FileServiceResponse) error
	// 重命名神经元
	RenameNeuron(context.Context, *RenameNeuronRequest, *RenameNeuronResponse) error
	// 获取所有神经元
	ListNeuron(context.Context, *ListNeuronRequest, *ListNeuronResponse) error
	// 上文文档
	UploadDocument(context.Context, *UploadDocumentRequest, *UploadDocumentResponse) error
	// 删除文档
	DeleteDocument(context.Context, *DeleteDocumentRequest, *FileServiceResponse) error
	// 获取所有文档
	ListDocuments(context.Context, *ListDocumentsRequest, *ListDocumentsResponse) error
	// 重命名文档
	RenameDocument(context.Context, *RenameDocumentRequest, *RenameDocumentResponse) error
	// 获取垃圾桶中所有文档
	ListDocumentsInBin(context.Context, *ListDocumentsInBinRequest, *ListDocumentsInBinResponse) error
	// 恢复文档
	RecoveryDocument(context.Context, *RecoveryDocumentRequest, *RecoveryDocumentResponse) error
}

func RegisterFileServiceHandler(s server.Server, hdlr FileServiceHandler, opts ...server.HandlerOption) error {
	type fileService interface {
		GetAvatar(ctx context.Context, in *GetAvatarRequest, out *AvatarResp) error
		UpdateAvatar(ctx context.Context, in *UpdateAvatarRequest, out *AvatarResp) error
		CreateNeuron(ctx context.Context, in *CreateNeuronRequest, out *CreateNeuronResponse) error
		DeleteNeuron(ctx context.Context, in *DeleteNeuronRequest, out *FileServiceResponse) error
		RenameNeuron(ctx context.Context, in *RenameNeuronRequest, out *RenameNeuronResponse) error
		ListNeuron(ctx context.Context, in *ListNeuronRequest, out *ListNeuronResponse) error
		UploadDocument(ctx context.Context, in *UploadDocumentRequest, out *UploadDocumentResponse) error
		DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, out *FileServiceResponse) error
		ListDocuments(ctx context.Context, in *ListDocumentsRequest, out *ListDocumentsResponse) error
		RenameDocument(ctx context.Context, in *RenameDocumentRequest, out *RenameDocumentResponse) error
		ListDocumentsInBin(ctx context.Context, in *ListDocumentsInBinRequest, out *ListDocumentsInBinResponse) error
		RecoveryDocument(ctx context.Context, in *RecoveryDocumentRequest, out *RecoveryDocumentResponse) error
	}
	type FileService struct {
		fileService
	}
	h := &fileServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FileService{h}, opts...))
}

type fileServiceHandler struct {
	FileServiceHandler
}

func (h *fileServiceHandler) GetAvatar(ctx context.Context, in *GetAvatarRequest, out *AvatarResp) error {
	return h.FileServiceHandler.GetAvatar(ctx, in, out)
}

func (h *fileServiceHandler) UpdateAvatar(ctx context.Context, in *UpdateAvatarRequest, out *AvatarResp) error {
	return h.FileServiceHandler.UpdateAvatar(ctx, in, out)
}

func (h *fileServiceHandler) CreateNeuron(ctx context.Context, in *CreateNeuronRequest, out *CreateNeuronResponse) error {
	return h.FileServiceHandler.CreateNeuron(ctx, in, out)
}

func (h *fileServiceHandler) DeleteNeuron(ctx context.Context, in *DeleteNeuronRequest, out *FileServiceResponse) error {
	return h.FileServiceHandler.DeleteNeuron(ctx, in, out)
}

func (h *fileServiceHandler) RenameNeuron(ctx context.Context, in *RenameNeuronRequest, out *RenameNeuronResponse) error {
	return h.FileServiceHandler.RenameNeuron(ctx, in, out)
}

func (h *fileServiceHandler) ListNeuron(ctx context.Context, in *ListNeuronRequest, out *ListNeuronResponse) error {
	return h.FileServiceHandler.ListNeuron(ctx, in, out)
}

func (h *fileServiceHandler) UploadDocument(ctx context.Context, in *UploadDocumentRequest, out *UploadDocumentResponse) error {
	return h.FileServiceHandler.UploadDocument(ctx, in, out)
}

func (h *fileServiceHandler) DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, out *FileServiceResponse) error {
	return h.FileServiceHandler.DeleteDocument(ctx, in, out)
}

func (h *fileServiceHandler) ListDocuments(ctx context.Context, in *ListDocumentsRequest, out *ListDocumentsResponse) error {
	return h.FileServiceHandler.ListDocuments(ctx, in, out)
}

func (h *fileServiceHandler) RenameDocument(ctx context.Context, in *RenameDocumentRequest, out *RenameDocumentResponse) error {
	return h.FileServiceHandler.RenameDocument(ctx, in, out)
}

func (h *fileServiceHandler) ListDocumentsInBin(ctx context.Context, in *ListDocumentsInBinRequest, out *ListDocumentsInBinResponse) error {
	return h.FileServiceHandler.ListDocumentsInBin(ctx, in, out)
}

func (h *fileServiceHandler) RecoveryDocument(ctx context.Context, in *RecoveryDocumentRequest, out *RecoveryDocumentResponse) error {
	return h.FileServiceHandler.RecoveryDocument(ctx, in, out)
}
