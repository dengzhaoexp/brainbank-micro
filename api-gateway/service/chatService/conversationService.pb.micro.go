// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: conversationService.proto

package chatService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ConversationService service

func NewConversationServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ConversationService service

type ConversationService interface {
	// 创建会话标题
	CreateTitle(ctx context.Context, in *CreateTitleRequest, opts ...client.CallOption) (ConversationService_CreateTitleService, error)
	// 响应用户消息
	AssistantMessage(ctx context.Context, in *AssistantMessageRequest, opts ...client.CallOption) (ConversationService_AssistantMessageService, error)
	// 获取用户所有会话
	Conversations(ctx context.Context, in *ConversationsRequest, opts ...client.CallOption) (*ConversationsResponse, error)
	// 获取会话消息
	GetConversation(ctx context.Context, in *GetConversationRequest, opts ...client.CallOption) (*GetConversationResponse, error)
}

type conversationService struct {
	c    client.Client
	name string
}

func NewConversationService(name string, c client.Client) ConversationService {
	return &conversationService{
		c:    c,
		name: name,
	}
}

func (c *conversationService) CreateTitle(ctx context.Context, in *CreateTitleRequest, opts ...client.CallOption) (ConversationService_CreateTitleService, error) {
	req := c.c.NewRequest(c.name, "ConversationService.CreateTitle", &CreateTitleRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &conversationServiceCreateTitle{stream}, nil
}

type ConversationService_CreateTitleService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*CreateTitleResponse, error)
}

type conversationServiceCreateTitle struct {
	stream client.Stream
}

func (x *conversationServiceCreateTitle) Close() error {
	return x.stream.Close()
}

func (x *conversationServiceCreateTitle) Context() context.Context {
	return x.stream.Context()
}

func (x *conversationServiceCreateTitle) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *conversationServiceCreateTitle) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *conversationServiceCreateTitle) Recv() (*CreateTitleResponse, error) {
	m := new(CreateTitleResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *conversationService) AssistantMessage(ctx context.Context, in *AssistantMessageRequest, opts ...client.CallOption) (ConversationService_AssistantMessageService, error) {
	req := c.c.NewRequest(c.name, "ConversationService.AssistantMessage", &AssistantMessageRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &conversationServiceAssistantMessage{stream}, nil
}

type ConversationService_AssistantMessageService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*AssistantMessageResponse, error)
}

type conversationServiceAssistantMessage struct {
	stream client.Stream
}

func (x *conversationServiceAssistantMessage) Close() error {
	return x.stream.Close()
}

func (x *conversationServiceAssistantMessage) Context() context.Context {
	return x.stream.Context()
}

func (x *conversationServiceAssistantMessage) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *conversationServiceAssistantMessage) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *conversationServiceAssistantMessage) Recv() (*AssistantMessageResponse, error) {
	m := new(AssistantMessageResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *conversationService) Conversations(ctx context.Context, in *ConversationsRequest, opts ...client.CallOption) (*ConversationsResponse, error) {
	req := c.c.NewRequest(c.name, "ConversationService.Conversations", in)
	out := new(ConversationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationService) GetConversation(ctx context.Context, in *GetConversationRequest, opts ...client.CallOption) (*GetConversationResponse, error) {
	req := c.c.NewRequest(c.name, "ConversationService.GetConversation", in)
	out := new(GetConversationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConversationService service

type ConversationServiceHandler interface {
	// 创建会话标题
	CreateTitle(context.Context, *CreateTitleRequest, ConversationService_CreateTitleStream) error
	// 响应用户消息
	AssistantMessage(context.Context, *AssistantMessageRequest, ConversationService_AssistantMessageStream) error
	// 获取用户所有会话
	Conversations(context.Context, *ConversationsRequest, *ConversationsResponse) error
	// 获取会话消息
	GetConversation(context.Context, *GetConversationRequest, *GetConversationResponse) error
}

func RegisterConversationServiceHandler(s server.Server, hdlr ConversationServiceHandler, opts ...server.HandlerOption) error {
	type conversationService interface {
		CreateTitle(ctx context.Context, stream server.Stream) error
		AssistantMessage(ctx context.Context, stream server.Stream) error
		Conversations(ctx context.Context, in *ConversationsRequest, out *ConversationsResponse) error
		GetConversation(ctx context.Context, in *GetConversationRequest, out *GetConversationResponse) error
	}
	type ConversationService struct {
		conversationService
	}
	h := &conversationServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ConversationService{h}, opts...))
}

type conversationServiceHandler struct {
	ConversationServiceHandler
}

func (h *conversationServiceHandler) CreateTitle(ctx context.Context, stream server.Stream) error {
	m := new(CreateTitleRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ConversationServiceHandler.CreateTitle(ctx, m, &conversationServiceCreateTitleStream{stream})
}

type ConversationService_CreateTitleStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*CreateTitleResponse) error
}

type conversationServiceCreateTitleStream struct {
	stream server.Stream
}

func (x *conversationServiceCreateTitleStream) Close() error {
	return x.stream.Close()
}

func (x *conversationServiceCreateTitleStream) Context() context.Context {
	return x.stream.Context()
}

func (x *conversationServiceCreateTitleStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *conversationServiceCreateTitleStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *conversationServiceCreateTitleStream) Send(m *CreateTitleResponse) error {
	return x.stream.Send(m)
}

func (h *conversationServiceHandler) AssistantMessage(ctx context.Context, stream server.Stream) error {
	m := new(AssistantMessageRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ConversationServiceHandler.AssistantMessage(ctx, m, &conversationServiceAssistantMessageStream{stream})
}

type ConversationService_AssistantMessageStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*AssistantMessageResponse) error
}

type conversationServiceAssistantMessageStream struct {
	stream server.Stream
}

func (x *conversationServiceAssistantMessageStream) Close() error {
	return x.stream.Close()
}

func (x *conversationServiceAssistantMessageStream) Context() context.Context {
	return x.stream.Context()
}

func (x *conversationServiceAssistantMessageStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *conversationServiceAssistantMessageStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *conversationServiceAssistantMessageStream) Send(m *AssistantMessageResponse) error {
	return x.stream.Send(m)
}

func (h *conversationServiceHandler) Conversations(ctx context.Context, in *ConversationsRequest, out *ConversationsResponse) error {
	return h.ConversationServiceHandler.Conversations(ctx, in, out)
}

func (h *conversationServiceHandler) GetConversation(ctx context.Context, in *GetConversationRequest, out *GetConversationResponse) error {
	return h.ConversationServiceHandler.GetConversation(ctx, in, out)
}
